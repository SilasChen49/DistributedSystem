package ClientMachine.ServiceApp;


/**
* ServiceApp/ServicePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Service.idl
* Monday, November 6, 2017 7:44:51 o'clock PM EST
*/

public abstract class ServicePOA extends org.omg.PortableServer.Servant
 implements ServiceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("sayHello", new java.lang.Integer (0));
    _methods.put ("bookRoom", new java.lang.Integer (1));
    _methods.put ("getAvailableTimeSlot", new java.lang.Integer (2));
    _methods.put ("cancelBooking", new java.lang.Integer (3));
    _methods.put ("createRoom", new java.lang.Integer (4));
    _methods.put ("deleteRoom", new java.lang.Integer (5));
    _methods.put ("changeReservation", new java.lang.Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // ServiceApp/Service/sayHello
       {
         String $result = null;
         $result = this.sayHello ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // ServiceApp/Service/bookRoom
       {
         String studentID = in.read_string ();
         String campusName = in.read_string ();
         String date = in.read_string ();
         String room_Number = in.read_string ();
         String timeslot = in.read_string ();
         String $result = null;
         $result = this.bookRoom (studentID, campusName, date, room_Number, timeslot);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 2:  // ServiceApp/Service/getAvailableTimeSlot
       {
         String date = in.read_string ();
         String $result = null;
         $result = this.getAvailableTimeSlot (date);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 3:  // ServiceApp/Service/cancelBooking
       {
         String studentID = in.read_string ();
         String bookingID = in.read_string ();
         boolean $result = false;
         $result = this.cancelBooking (studentID, bookingID);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 4:  // ServiceApp/Service/createRoom
       {
         String date = in.read_string ();
         String room_Number = in.read_string ();
         String list_Of_Time_Slots[] = TimeSeqHelper.read (in);
         int $result = (int)0;
         $result = this.createRoom (date, room_Number, list_Of_Time_Slots);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 5:  // ServiceApp/Service/deleteRoom
       {
         String date = in.read_string ();
         String room_Number = in.read_string ();
         String list_Of_Time_Slots[] = TimeSeqHelper.read (in);
         int $result = (int)0;
         $result = this.deleteRoom (date, room_Number, list_Of_Time_Slots);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 6:  // ServiceApp/Service/changeReservation
       {
         String booking_id = in.read_string ();
         String studentID = in.read_string ();
         String campusName = in.read_string ();
         String date = in.read_string ();
         String room_Number = in.read_string ();
         String timeslot = in.read_string ();
         String $result = null;
         $result = this.changeReservation (booking_id, studentID, campusName, date, room_Number, timeslot);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ServiceApp/Service:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Service _this() 
  {
    return ServiceHelper.narrow(
    super._this_object());
  }

  public Service _this(org.omg.CORBA.ORB orb) 
  {
    return ServiceHelper.narrow(
    super._this_object(orb));
  }


} // class ServicePOA
